1. Explain Architecture of GKE?
2. How many type of cluster available in GKE?
3. Define each components in master node?
4. Define each components in worker node?
5. What is latest version of GKE and how many nodes available?
6. what are GKE objects you are using?
7. explain each object in gke?
8. how will restric pod scheduling?
9. what is taint and toleration ?
10. What is pod and node affinity?
11. how will you secure your GKE and POD?
12. how you are using service account in GKE?
13. what is PV, PVC, SC?
14. local data mount with container/pod?
15. what are default namespace available in GKE?
16. what will happen incase master node fails?
17. how you are handing GKE cluster upgrade?
18. what are error you are faced in GKE?
19. How will you upgrade your application in GKE?
20. Write HPA , VPA and definition?
21. RBAC and work load identity?
22. what is networking policy 
22. what is CSI - Container storage interface
23. how to define the VPC and CIDR for GKE?
24. if etcd pod fail what will happen?
25. Version Upgrade command on GKE?
        Latest version : 1.29.4
    Upgrade control plan : gcloud container clusters upgrade CLUSTER_NAME --zone ZONE --master
    Workder upgrade : gcloud container clusters upgrade CLUSTER_NAME --zone ZONE --node-pool NODE_POOL_NAME
    Upgrade all nodes pool : gcloud container clusters upgrade CLUSTER_NAME --zone ZONE --all
25. which location we can find cluster config in GKE?
      /.kube/config
      kubectl config current-context
26. GKE Channel release version :
        In Google Kubernetes Engine (GKE), the channel version refers to the release channel you choose for managing your cluster's Kubernetes versions. GKE offers different release channels to manage how quickly your cluster receives new versions of Kubernetes and updates, providing flexibility to balance stability and access to new features.
GKE offers three main release channels:
        Rapid Channel:
Purpose: Designed for users who want early access to the latest Kubernetes features and updates.
        Regular Channel:
Purpose: Aimed at users who want a stable Kubernetes environment with a good balance between new features and reliability.
        Stable Channel:
Purpose: Targeted at users who need the highest stability and minimal disruption, with a preference for only well-tested Kubernetes versions

    
